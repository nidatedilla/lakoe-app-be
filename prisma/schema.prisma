// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profiles {
  id        String      @id @unique @default(cuid())
  image     String?
  user      users       @relation(fields: [userId], references: [id])
  userId    String      @unique
  locations locations[]
}

model users {
  id                 String             @id @unique @default(cuid())
  name               String
  email              String             @unique
  phone              String             @unique
  password           String
  role               String?
  profile            profiles?
  balance            Int                @default(0)
  last_total_revenue Int?
  stores             stores?
  invoices           invoices[]
  payments           payments[]
  orders             orders[]
  payment_requests   payment_requests[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  bank_accounts bank_accounts?
}

model stores {
  id                    String                  @id @unique @default(cuid())
  name                  String                  @unique
  banner                String?
  logo                  String?
  description           String
  domain                String?                 @unique
  slogan                String?
  userId                String                  @unique
  user                  users                   @relation(fields: [userId], references: [id])
  bank_accounts         bank_accounts?
  products              products[]
  operation_hours       operation_hours[]
  message_templates     message_templates[]
  locations             locations[]
  stores_in_decorations stores_in_decorations[]
  orders                orders[]
  payment_requests      payment_requests[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
}

model payment_requests {
  id       String  @id @unique @default(cuid())
  sellerId String
  status   String
  message  String?
  storeId  String
  amount   Int

  store  stores @relation(fields: [storeId], references: [id])
  seller users  @relation(fields: [sellerId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
}

model orders {
  id                        String        @id @unique @default(cuid())
  order_number              String?
  user                      users?        @relation(fields: [userId], references: [id])
  userId                    String?
  store                     stores        @relation(fields: [storeId], references: [id])
  storeId                   String
  total_price               Int
  status                    String        @default("Belum Dibayar")
  payment_status            String        @default("Belum Dibayar")
  payment_method            String?
  origin_contact_name       String
  origin_contact_phone      String
  origin_address            String
  origin_postal_code        String
  destination_contact_name  String
  destination_contact_phone String
  destination_address       String
  destination_postal_code   String
  courier                   couriers?     @relation(fields: [courierId], references: [id])
  courierId                 String?
  rate_courier              Int?
  tracking_number           String?
  courier_tracking_id       String?
  courier_waybill_id        String?
  courier_link              String?
  created_at                DateTime      @default(now())
  updated_at                DateTime      @updatedAt
  order_items               order_items[]
  invoices                  invoices?     @relation(fields: [invoicesId], references: [id])
  invoicesId                String?
}

model order_items {
  id                   String     @id @unique @default(cuid())
  order                orders     @relation(fields: [orderId], references: [id])
  orderId              String
  product              products   @relation(fields: [productId], references: [id])
  productId            String
  variant              variants[]
  variantOptionValueId String?
  qty                  Int
  price                Int
  weight               Int
  height               Int?
  length               Int?
  width                Int?
}

model bank_accounts {
  id       String @id @unique @default(cuid())
  bank     String
  userId   String @unique
  acc_num  String
  acc_name String
  user     users  @relation(fields: [userId], references: [id])
  store    stores @relation(fields: [storeId], references: [id])
  storeId  String @unique
}

model products {
  id            String              @id @unique @default(uuid())
  name          String
  description   String
  attachments   String?
  is_active     Boolean?            @default(true)
  url           String              @unique
  minimum_order Int
  price         Int
  sku           String?
  stock         Int
  weight        Int
  size          Json?
  stores        stores?             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String?
  categories    productCategories[]
  variant       variants[]
  categoryId    String?
  order_items   order_items[]
}

model categories {
  id       String              @id @unique @default(cuid())
  name     String
  parentId String?
  parent   categories?         @relation("CategoryParent", fields: [parentId], references: [id])
  children categories[]        @relation("CategoryParent")
  products productCategories[]
}

model productCategories {
  id         String     @id @unique @default(cuid())
  product    products   @relation(fields: [productId], references: [id])
  productId  String
  category   categories @relation(fields: [categoryId], references: [id])
  categoryId String
}

model variants {
  id            String       @id @default(uuid())
  combination   Json
  price         Int
  sku           String?
  stock         Int
  weight        Int
  photo         String?
  productId     String
  product       products     @relation(fields: [productId], references: [id], onDelete: Cascade)
  order_items   order_items? @relation(fields: [order_itemsId], references: [id])
  order_itemsId String?
}

model confirmation_payment {
  id        String   @id @unique @default(cuid())
  amount    Int
  bank      String
  invoice   invoices @relation(fields: [invoiceId], references: [id])
  invoiceId String
}

model invoice_histories {
  id         String    @id @unique @default(cuid())
  status     String?
  invoice    invoices? @relation(fields: [invoiceId], references: [id])
  invoiceId  String?
  created_at DateTime? @default(now())
}

model invoices {
  id                   String                 @id @unique
  prices               Int
  service_charge       Int?
  status               String
  receiver_phone       String?
  receiver_address     String?
  receiver_name        String?
  invoice_number       String?
  payment              payments?
  paymentId            String                 @unique
  courier              couriers               @relation(fields: [courierId], references: [id])
  courierId            String
  user                 users                  @relation(fields: [userId], references: [id])
  userId               String
  confirmation_payment confirmation_payment[]
  invoice_histories    invoice_histories[]
  orders               orders[]
}

model payments {
  id                   String    @id @unique @default(cuid())
  bank                 String
  amount               Int?
  status               String?
  invoice              invoices? @relation(fields: [invoiceId], references: [id])
  invoiceId            String?   @unique
  user                 users?    @relation(fields: [userId], references: [id])
  userId               String?
  moota_transaction_id String?
}

model couriers {
  id                               String     @id @unique @default(cuid())
  available_collection_method      String[]
  available_for_cash_on_delivery   Boolean
  available_for_proof_of_delivery  Boolean
  available_for_instant_waybill_id Boolean
  courier_name                     String
  courier_code                     String
  courier_service_name             String
  courier_service_code             String
  tier                             String
  description                      String
  service_type                     String
  shipping_type                    String
  shipment_duration_range          String
  shipment_duration_unit           String
  orders                           orders[]
  invoices                         invoices[]
  is_selected                      Boolean    @default(true)

  @@unique([courier_code, courier_service_code])
}

model operation_hours {
  id       String   @id @unique @default(cuid())
  day      DateTime
  open_at  DateTime
  close_at DateTime
  id_off   Boolean
  store    stores   @relation(fields: [storeId], references: [id])
  storeId  String
}

model stores_in_decorations {
  id           String      @id @unique @default(cuid())
  decoration   decoration? @relation(fields: [decorationId], references: [id])
  decorationId String?
  store        stores?     @relation(fields: [storeId], references: [id])
  storeId      String?
}

model decoration {
  id                    String                  @id @unique @default(cuid())
  type                  String?
  stores_in_decorations stores_in_decorations[]
}

model message_templates {
  id      String  @id @unique @default(cuid())
  name    String?
  content String?
  store   stores? @relation(fields: [storeId], references: [id])
  storeId String?
}

model locations {
  id               String    @id @unique @default(cuid())
  name             String?
  address          String?
  postal_code      String?
  provinces        String?
  regencies        String?
  districts        String?
  villages         String?
  latitude         String?
  longitude        String?
  contact_name     String
  contact_phone    String
  type             String
  store            stores?   @relation(fields: [storeId], references: [id])
  storeId          String?
  profile          profiles? @relation(fields: [profileId], references: [id])
  profileId        String?
  is_main_location Boolean?
  area_id          String
  guestId          String?   @unique
}
