// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profiles {
  id        String      @id @unique @default(cuid())
  image     String?
  user      users       @relation(fields: [userId], references: [id])
  userId    String      @unique
  locations locations[]
}

model users {
  id         String       @id @unique @default(cuid())
  name       String
  email      String       @unique
  phone      String       @unique
  password   String
  role       String?
  profile    profiles?
  cart       carts?
  stores     stores?
  cart_items cart_items[]
  invoices   invoices[]
  payments   payments[]
  orders     orders[]
}

model carts {
  id         String       @id @unique @default(cuid())
  prices     Int
  user       users        @relation(fields: [userId], references: [id])
  userId     String       @unique
  discount   Decimal?
  store      stores       @relation(fields: [storeId], references: [id])
  storeId    String
  cart_items cart_items[]
  invoice    invoices?
}

model cart_items {
  id                   String  @id @unique @default(cuid())
  qty                  Int
  price                Int
  cart                 carts   @relation(fields: [cartId], references: [id])
  cartId               String
  user                 users   @relation(fields: [userId], references: [id])
  userId               String
  store                stores  @relation(fields: [storeId], references: [id])
  storeId              String
  variantOptionValueId String?
}

model stores {
  id                    String                  @id @unique @default(cuid())
  name                  String                  @unique
  banner                String?
  logo                  String?
  description           String
  domain                String?                 @unique
  slogan                String?
  userId                String                  @unique
  user                  users                   @relation(fields: [userId], references: [id])
  bank_accounts         bank_accounts[]
  products              products[]
  carts                 carts[]
  cart_items            cart_items[]
  operation_hours       operation_hours[]
  message_templates     message_templates[]
  locations             locations[]
  stores_in_decorations stores_in_decorations[]
  orders                orders[]
}

model orders {
  id                                 String        @id @unique @default(cuid())
  order_number                       String        @unique
  user                               users?        @relation(fields: [userId], references: [id])
  userId                             String?
  store                              stores        @relation(fields: [storeId], references: [id])
  storeId                            String
  total_price                        Int
  discount                           Decimal?
  status                             String        @default("pending")
  payment_status                     String        @default("unpaid")
  payment_method                     String?
  shipper_contact_name               String?
  shipper_contact_phone              String?
  shipper_contact_email              String?
  shipper_organization               String?
  origin_contact_name                String
  origin_contact_phone               String
  origin_contact_email               String?
  origin_address                     String
  origin_note                        String?
  origin_postal_code                 String
  origin_latitude                    Float?
  origin_longitude                   Float?
  origin_area_id                     String?
  origin_location_id                 String?
  origin_collection_method           String?
  destination_contact_name           String
  destination_contact_phone          String
  destination_contact_email          String?
  destination_address                String
  destination_note                   String?
  destination_postal_code            String
  destination_latitude               Float?
  destination_longitude              Float?
  destination_area_id                String?
  destination_location_id            String?
  destination_cash_on_delivery       Int?
  destination_cash_on_delivery_type  String?
  destination_proof_of_delivery      Boolean?
  destination_proof_of_delivery_note String?
  courier                            couriers?     @relation(fields: [courierId], references: [id])
  courierId                          String?
  tracking_number                    String?
  order_note                         String?
  metadata                           Json?
  reference_id                       String?       @unique
  created_at                         DateTime      @default(now())
  updated_at                         DateTime      @updatedAt
  order_items                        order_items[]
  invoices                           invoices?     @relation(fields: [invoicesId], references: [id])
  invoicesId                         String?
}

model order_items {
  id                   String     @id @unique @default(cuid())
  order                orders     @relation(fields: [orderId], references: [id])
  orderId              String
  product              products   @relation(fields: [productId], references: [id])
  productId            String
  variant              variants[]
  variantOptionValueId String?
  qty                  Int
  price                Int
  weight               Int
  height               Int?
  length               Int?
  width                Int?
}

model bank_accounts {
  id       String @id @unique @default(cuid())
  bank     String
  acc_num  Int
  acc_name String
  store    stores @relation(fields: [storeId], references: [id])
  storeId  String
}

model products {
  id            String              @id @unique @default(uuid())
  name          String
  description   String
  attachments   String?
  is_active     Boolean?            @default(true)
  url           String              @unique
  minimum_order Int
  price         Int
  sku           String?
  stock         Int
  weight        Int
  size          Json?
  stores        stores?             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId       String?
  categories    productCategories[]
  variant       variants[]
  categoryId    String?
  order_items   order_items[]
}

model categories {
  id       String              @id @unique @default(cuid())
  name     String
  parentId String?
  parent   categories?         @relation("CategoryParent", fields: [parentId], references: [id])
  children categories[]        @relation("CategoryParent")
  products productCategories[]
}

model productCategories {
  id         String     @id @unique @default(cuid())
  product    products   @relation(fields: [productId], references: [id])
  productId  String
  category   categories @relation(fields: [categoryId], references: [id])
  categoryId String
}

model variants {
  id            String       @id @default(uuid())
  combination   Json // atau gunakan tipe data lain sesuai kebutuhan, misalnya String jika di-serialize
  price         Int
  sku           String?
  stock         Int
  weight        Int
  photo         String?
  productId     String
  product       products     @relation(fields: [productId], references: [id], onDelete: Cascade)
  order_items   order_items? @relation(fields: [order_itemsId], references: [id])
  order_itemsId String?
}

model confirmation_payment {
  id        String   @id @unique @default(cuid())
  amount    Int
  bank      String
  invoice   invoices @relation(fields: [invoiceId], references: [id])
  invoiceId String
}

model invoice_histories {
  id         String    @id @unique @default(cuid())
  status     String?
  invoice    invoices? @relation(fields: [invoiceId], references: [id])
  invoiceId  String?
  created_at DateTime? @default(now())
}

model invoices {
  id                   String                 @id @unique
  prices               Int
  service_charge       Int?
  status               String
  reciver_longitude    Decimal?
  receiver_latitude    Decimal?
  receiver_district    String?
  receiver_phone       Int?
  receiver_address     String?
  receiver_name        String?
  invoice_number       String?
  cart                 carts?                 @relation(fields: [cartId], references: [id])
  cartId               String?                @unique
  payment              payments?
  paymentId            String                 @unique
  courier              couriers               @relation(fields: [courierId], references: [id])
  courierId            String                 @unique
  user                 users                  @relation(fields: [userId], references: [id])
  userId               String
  confirmation_payment confirmation_payment[]
  invoice_histories    invoice_histories[]
  orders               orders[]
}

model payments {
  id                   String    @id @unique @default(cuid())
  bank                 String
  amount               Int?
  status               String?
  invoice              invoices? @relation(fields: [invoiceId], references: [id])
  invoiceId            String?   @unique
  user                 users?    @relation(fields: [userId], references: [id])
  userId               String?
  moota_transaction_id String?
}

model couriers {
  id                               String    @id @unique @default(cuid())
  available_collection_method      String[]
  available_for_cash_on_delivery   Boolean
  available_for_proof_of_delivery  Boolean
  available_for_instant_waybill_id Boolean
  courier_name                     String
  courier_code                     String
  courier_service_name             String
  courier_service_code             String
  tier                             String
  description                      String
  service_type                     String
  shipping_type                    String
  shipment_duration_range          String
  shipment_duration_unit           String
  orders                           orders[]
  invoices                         invoices?
  is_selected                      Boolean   @default(false)
}

model operation_hours {
  id       String   @id @unique @default(cuid())
  day      DateTime
  open_at  DateTime
  close_at DateTime
  id_off   Boolean
  store    stores   @relation(fields: [storeId], references: [id])
  storeId  String
}

model stores_in_decorations {
  id           String      @id @unique @default(cuid())
  decoration   decoration? @relation(fields: [decorationId], references: [id])
  decorationId String?
  store        stores?     @relation(fields: [storeId], references: [id])
  storeId      String?
}

model decoration {
  id                    String                  @id @unique @default(cuid())
  type                  String?
  stores_in_decorations stores_in_decorations[]
}

model message_templates {
  id      String  @id @unique @default(cuid())
  name    String?
  content String?
  store   stores? @relation(fields: [storeId], references: [id])
  storeId String?
}

model locations {
  id               String    @id @unique @default(cuid())
  name             String?
  address          String?
  postal_code      String?
  provinces        String?
  regencies        String?
  districts        String?
  villages         String?
  latitude         String?
  longitude        String?
  contact_name     String
  contact_phone    String
  type             String
  store            stores?   @relation(fields: [storeId], references: [id])
  storeId          String?
  profile          profiles? @relation(fields: [profileId], references: [id])
  profileId        String?
  is_main_location Boolean?
  area_id          String
}
